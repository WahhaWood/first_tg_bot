from bot import dp, bot
from aiogram import types
from utils.func import add_admin, get_orders, get_admin_ids, is_active_chat, add_active_chat, remove_active_chat, check_admin, get_active_dialogs
from utils.keyboard import main_admin_keyboard, admin_keyboard, main_keyboard
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command, StateFilter
from time import sleep
from pymongo import MongoClient
from aiogram.fsm.storage.base import StorageKey
import config as con


client = MongoClient(con.MONGODB_URL)
db = client['telegram_bot']
admin_collection = db['admins']
active_chats_collection = db['active_chats']
config_collection = db['config']


class DialogStates(StatesGroup):
    active_dialog = State()

class AdminStates(StatesGroup):
    waiting_for_channel_url = State()
    waiting_for_admin_id = State()

async def admin_start(message: types.Message):
    if check_admin(message.from_user.id):
        await message.answer(f'–í—ñ—Ç–∞—î–º–æ! –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –Ω–∞—à–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É!üåü')
        await message.answer(f'–í–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞–ª–∏—Å—è —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!üõ†Ô∏è', reply_markup=main_admin_keyboard)

async def admins_panel(message: types.Message):
    if check_admin(message.from_user.id):
        await message.answer(f"–í–∏ –≤—ñ–¥–∫—Ä–∏–ª–∏ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—åüîß", reply_markup=admin_keyboard)

async def id_user(message: types.Message):
    if check_admin(message.from_user.id):
        await message.answer(f"–û—Å—å –≤–∞—à ID: {message.from_user.id}")

async def show_orders(message: types.Message):
    if check_admin(message.from_user.id):
        if active_chats_collection.count_documents({}) > 0:
            active_chats = list(active_chats_collection.find())
            
            builder = InlineKeyboardBuilder()

            for chat in active_chats:
                user_id = chat['user_id']
                username = chat['username']
                button_text = f"{username} (ID: {user_id})"
                builder.add(types.InlineKeyboardButton(text=button_text, callback_data=f'order_{user_id}'))

            builder.adjust(1)
            await message.reply("–û–±–µ—Ä—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", reply_markup=builder.as_markup())
        else:
            await message.reply("–ù–∞—Ä–∞–∑—ñ —É –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.")

async def end_dialog_callback(user_id, state: FSMContext):
    await state.clear()
    if active_chats_collection.find_one({'admin_id': user_id}):
        user_id_ = active_chats_collection.find_one({'admin_id': user_id})['user_id']
        await bot.send_message(user_id, "–î—ñ–∞–ª–æ–≥ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ‚ùå", reply_markup=main_admin_keyboard)
        await bot.send_message(user_id_, "–î—ñ–∞–ª–æ–≥ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ‚ùå", reply_markup=main_keyboard)
        active_chats_collection.update_one(
            {'admin_id': user_id},
            {'$set': {'active-status': False}, '$unset': {'admin_id': ""}}
        )
    if active_chats_collection.find_one({'user_id': user_id}):
        user_id_ = active_chats_collection.find_one({'user_id': user_id})['admin_id']
        await bot.send_message(user_id, "–î—ñ–∞–ª–æ–≥ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ‚ùå", reply_markup=main_keyboard)
        await bot.send_message(user_id_, "–î—ñ–∞–ª–æ–≥ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ‚ùå", reply_markup=main_admin_keyboard)
        active_chats_collection.update_one(
            {'user_id': user_id},
            {'$set': {'active-status': False}, '$unset': {'admin_id': ""}}
        )

    state_with: FSMContext = FSMContext(
        storage=dp.storage,
        key=StorageKey(
            chat_id=user_id_,
            user_id=user_id_,
            bot_id=bot.id
        )
    )
    await state_with.update_data()
    await state_with.clear()

async def handle_dialog_message(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥‚ùå":
        await end_dialog_callback(user_id, state)
        return

    if message.sticker:
        sticker_id = message.sticker.file_id
        if active_chats_collection.find_one({'admin_id': user_id}):
            await bot.send_sticker(active_chats_collection.find_one({'admin_id': user_id})['user_id'], sticker_id)
        if active_chats_collection.find_one({'user_id': user_id}):
            await bot.send_sticker(active_chats_collection.find_one({'user_id': user_id})['admin_id'], sticker_id)
        return

    if active_chats_collection.find_one({'admin_id': user_id}):
        await bot.send_message(active_chats_collection.find_one({'admin_id': user_id})['user_id'], f"{message.text}")
    if active_chats_collection.find_one({'user_id': user_id}):
        await bot.send_message(active_chats_collection.find_one({'user_id': user_id})['admin_id'], f"{message.text}")

async def close_order(callback_query: types.CallbackQuery):
    if check_admin(callback_query.from_user.id):
        user_id = int(callback_query.data.split('_')[2])
        admin_id = callback_query.from_user.id
        
        result = active_chats_collection.delete_one({'user_id': user_id})
        
        if result.deleted_count > 0:
            await bot.send_message(admin_id, f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID {user_id} —É—Å–ø—ñ—à–Ω–æ –∑–∞–∫—Ä–∏—Ç–æ‚úÖ", reply_markup=main_admin_keyboard)
            
            try:
                await bot.send_message(user_id, "–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–ª–æ –∑–∞–∫—Ä–∏—Ç–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º‚úÖ", reply_markup=main_keyboard)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        else:
            await callback_query.answer("–ü–æ–º–∏–ª–∫–∞: –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    

async def process_order(callback_query: types.CallbackQuery):
    if check_admin(callback_query.from_user.id):
        user_id = int(callback_query.data.split('_')[1])
        chat = active_chats_collection.find_one({'user_id': user_id})
        builder = InlineKeyboardBuilder()

        if chat:
            builder.add(
                types.InlineKeyboardButton(text="–†–æ–∑–ø–æ—á–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥üí¨", callback_data=f'start_dialog_{user_id}'),
                types.InlineKeyboardButton(text="–ó–∞–∫—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è‚ùå", callback_data=f'close_order_{user_id}')
            )
            username = chat['username']
            active_status = "–ê–∫—Ç–∏–≤–µ–Ω" if chat.get('active-status') else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            
            await bot.answer_callback_query(callback_query.id)
            await bot.send_message(
                callback_query.from_user.id, 
                f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:\nUsername: {username}\nUser ID: {user_id}\n–°—Ç–∞—Ç—É—Å: {active_status}",
                reply_markup=builder.as_markup()
            )
        else:
            await bot.answer_callback_query(callback_query.id, text="–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

async def new_admin(message: types.Message):
    if check_admin(message.from_user.id):
        try:
            id_new_admin = int(command.args)
            
            add_admin(id_new_admin)
            await message.answer(f"–£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑ ID {id_new_admin}!")
        except ValueError:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID.")
        except Exception as e:
            await message.answer(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")

async def exit_admin_panel(message: types.Message):
    if check_admin(message.from_user.id):
        await message.answer(f"–í–∏ –≤–∏–π—à–ª–∏ –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ‚úÖ", reply_markup=main_admin_keyboard)

async def start_dialog(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = int(callback_query.data.split('_')[2])

    active_chats_collection.update_one(
        {'user_id': user_id}, 
        {'$set': {'active-status': True, 'admin_id': callback_query.from_user.id}},
        upsert=True
    )

    await state.set_state(DialogStates.active_dialog)
    
    state_with: FSMContext = FSMContext(
        storage=dp.storage,
        key=StorageKey(
            chat_id=user_id,
            user_id=user_id,
            bot_id=bot.id
        )
    )
    await state_with.update_data()
    await state_with.set_state(DialogStates.active_dialog)

    dialog_buttons = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥‚ùå", callback_data=f"end_dialog_{user_id}", resize_keyboard=True)]])

    await bot.send_message(callback_query.from_user.id, "–î—ñ–∞–ª–æ–≥ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º —Ä–æ–∑–ø–æ—á–∞—Ç–æ.", reply_markup=dialog_buttons)
    await bot.send_message(user_id, "–î—ñ–∞–ª–æ–≥ —Ä–æ–∑–ø–æ—á–∞—Ç–æ! –ë—É–¥—å –ª–∞—Å–∫–∞, –æ—á—ñ–∫—É–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.", reply_markup=dialog_buttons)

async def change_channel_url_button(message: types.Message, state: FSMContext):
    if check_admin(message.from_user.id):
        await message.reply("–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –Ω–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª:")
        await state.set_state(AdminStates.waiting_for_channel_url)

async def update_channel_url(message: types.Message, state: FSMContext):
    new_url = message.text

    result = config_collection.update_one(
        {"parameter": "channel_url"},
        {"$set": {"channel_url": new_url}},
        upsert=True
    )

    if result.modified_count > 0 or result.upserted_id:
        await message.reply("–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æüîó")
    else:
        await message.reply("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è‚ö†Ô∏è")
    
    await state.clear()

async def add_new_admin_button(message: types.Message, state: FSMContext):
    if check_admin(message.from_user.id):
        await message.reply("–í—ñ–¥–ø—Ä–∞–≤—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
        await state.set_state(AdminStates.waiting_for_admin_id)

async def add_new_admin(message: types.Message, state: FSMContext):
    try:
        new_admin_id = int(message.text)

        result = admin_collection.insert_one({'admin_id': new_admin_id})

        if result.inserted_id:
            await message.reply(f"–ù–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑ ID {new_admin_id} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ‚ú®")
        else:
            await message.reply("–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –∑ —Ç–∞–∫–∏–º ID –≤–∂–µ —ñ—Å–Ω—É—î‚ö†Ô∏è")
        
    except ValueError:
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π —á–∏—Å–ª–æ–≤–∏–π ID‚ö†Ô∏è")
    
    await state.clear()

def register_handler_admin():
    dp.message.register(admins_panel, lambda message: message.text == "–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—åüîß")
    dp.message.register(id_user, Command('id'))
    dp.message.register(show_orders, lambda message: message.text == "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—èüìã")
    dp.message.register(exit_admin_panel, lambda message: message.text == "–í–∏–π—Ç–∏ –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ‚ùå")
    dp.message.register(change_channel_url_button, lambda message: message.text == "–ó–º—ñ–Ω–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ªüîó")
    dp.message.register(add_new_admin_button, lambda message: message.text == "–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞‚ú®")
    
    dp.callback_query.register(process_order, lambda callback_query: callback_query.data.startswith('order_'))
    dp.callback_query.register(start_dialog, lambda callback_query: callback_query.data.startswith('start_dialog_'))
    dp.callback_query.register(close_order, lambda callback_query: callback_query.data.startswith('close_order_'))

    dp.message.register(handle_dialog_message, DialogStates.active_dialog)
    dp.message.register(update_channel_url, AdminStates.waiting_for_channel_url)
    dp.message.register(add_new_admin, AdminStates.waiting_for_admin_id)
    
